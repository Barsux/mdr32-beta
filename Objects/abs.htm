<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\abs.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\abs.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Feb  7 16:46:54 2022
<BR><P>
<H3>Maximum Stack Usage =       2232 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; sendstr(char*, ...) &rArr; uart_tx_init() &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[6]">MIL_STD_1553B2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MIL_STD_1553B2_IRQHandler</a><BR>
 <LI><a href="#[7]">MIL_STD_1553B1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MIL_STD_1553B1_IRQHandler</a><BR>
 <LI><a href="#[8]">USB_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">USB_IRQHandler</a><BR>
 <LI><a href="#[9]">CAN1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">CAN1_IRQHandler</a><BR>
 <LI><a href="#[a]">CAN2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">CAN2_IRQHandler</a><BR>
 <LI><a href="#[b]">DMA_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DMA_IRQHandler</a><BR>
 <LI><a href="#[c]">UART1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">UART1_IRQHandler</a><BR>
 <LI><a href="#[d]">UART2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UART2_IRQHandler</a><BR>
 <LI><a href="#[e]">SSP1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SSP1_IRQHandler</a><BR>
 <LI><a href="#[f]">BUSY_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BUSY_IRQHandler</a><BR>
 <LI><a href="#[10]">ARINC429R_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ARINC429R_IRQHandler</a><BR>
 <LI><a href="#[11]">POWER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">POWER_IRQHandler</a><BR>
 <LI><a href="#[12]">WWDG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">WWDG_IRQHandler</a><BR>
 <LI><a href="#[13]">TIMER4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">TIMER4_IRQHandler</a><BR>
 <LI><a href="#[14]">TIMER1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">TIMER1_IRQHandler</a><BR>
 <LI><a href="#[15]">TIMER2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">TIMER2_IRQHandler</a><BR>
 <LI><a href="#[16]">TIMER3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">TIMER3_IRQHandler</a><BR>
 <LI><a href="#[17]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC_IRQHandler</a><BR>
 <LI><a href="#[18]">ETHERNET_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ETHERNET_IRQHandler</a><BR>
 <LI><a href="#[19]">SSP3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">SSP3_IRQHandler</a><BR>
 <LI><a href="#[1a]">SSP2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SSP2_IRQHandler</a><BR>
 <LI><a href="#[1b]">ARINC429T1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ARINC429T1_IRQHandler</a><BR>
 <LI><a href="#[1c]">ARINC429T2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ARINC429T2_IRQHandler</a><BR>
 <LI><a href="#[1d]">ARINC429T3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ARINC429T3_IRQHandler</a><BR>
 <LI><a href="#[1e]">ARINC429T4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ARINC429T4_IRQHandler</a><BR>
 <LI><a href="#[1f]">BKP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">BKP_IRQHandler</a><BR>
 <LI><a href="#[20]">EXT_INT1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">EXT_INT1_IRQHandler</a><BR>
 <LI><a href="#[21]">EXT_INT2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">EXT_INT2_IRQHandler</a><BR>
 <LI><a href="#[22]">EXT_INT3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">EXT_INT3_IRQHandler</a><BR>
 <LI><a href="#[23]">EXT_INT4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">EXT_INT4_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[10]">ARINC429R_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1b]">ARINC429T1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1c]">ARINC429T2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1d]">ARINC429T3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1e]">ARINC429T4_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1f]">BKP_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[f]">BUSY_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[9]">CAN1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[a]">CAN2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[b]">DMA_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[18]">ETHERNET_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[20]">EXT_INT1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[21]">EXT_INT2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[22]">EXT_INT3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[23]">EXT_INT4_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[7]">MIL_STD_1553B1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[6]">MIL_STD_1553B2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[11]">POWER_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[e]">SSP1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1a]">SSP2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[19]">SSP3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_mdr1986ve1t.o(.text.SystemInit) referenced from startup_mdr1986ve1t.o(.text)
 <LI><a href="#[14]">TIMER1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[15]">TIMER2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[16]">TIMER3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[13]">TIMER4_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[c]">UART1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[d]">UART2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[8]">USB_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[25]">__main</a> from __main.o(!!!main) referenced from startup_mdr1986ve1t.o(.text)
 <LI><a href="#[28]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[29]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[2a]">_printf_fp_hex_real</a> from _printf_fp_hex.o(.text) referenced from printf2.o(x$fpl$printf2)
 <LI><a href="#[27]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[26]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[df]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[75]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2f]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[30]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[32]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[34]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[36]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[37]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[38]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[3a]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[3b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[3d]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[3e]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[3f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[41]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[43]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[45]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[46]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[47]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[49]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[4b]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[4c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[4e]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[50]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[52]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[5c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[54]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[e4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[56]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[e8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[57]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[ea]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[61]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[f8]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[fc]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[fe]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[59]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ff]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; sendstr(char*, ...) &rArr; uart_tx_init() &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[100]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[8b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[60]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[101]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[62]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MIL_STD_1553B2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MIL_STD_1553B1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>USB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>CAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SSP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BUSY_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUSY_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUSY_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ARINC429R_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429R_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429R_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>POWER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ETHERNET_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SSP2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ARINC429T1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ARINC429T2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ARINC429T3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ARINC429T4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BKP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[64]"></a>vsnprintf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendstr(char*, ...)
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_idivmod</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[103]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[69]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[6a]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6b]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[67]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3c]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[31]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[65]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[66]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[26]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[44]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[72]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[40]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[48]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[73]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[42]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[4a]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[33]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[6e]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[71]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[6d]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[29]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[2a]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(x$fpl$printf2)
</UL>
<P><STRONG><a name="[7e]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[4d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[4f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[80]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[51]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[53]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[82]"></a>_c16rtomb</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[70]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[6c]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5a]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[83]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[55]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[7c]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[77]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[87]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[79]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[5f]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[106]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[107]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>strcmp</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, strcmpv6m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[63]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[108]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameTx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameRx
</UL>

<P><STRONG><a name="[8f]"></a>DMA_CtrlDataInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mdr32f9qx_dma.o(.text.DMA_CtrlDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_CtrlDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[8c]"></a>DMA_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mdr32f9qx_dma.o(.text.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
</UL>

<P><STRONG><a name="[8e]"></a>DMA_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mdr32f9qx_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_Init &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CtrlDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
</UL>

<P><STRONG><a name="[92]"></a>DMA_Request</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text.DMA_Request))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameTx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameRx
</UL>

<P><STRONG><a name="[96]"></a>DMA_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
</UL>

<P><STRONG><a name="[d8]"></a>ETH_BRGInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(.text.ETH_BRGInit))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[d9]"></a>ETH_ClockCMD</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(.text.ETH_ClockCMD))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[d5]"></a>ETH_ClockDeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(.text.ETH_ClockDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[90]"></a>ETH_DMAFrameRx</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mdr32f9qx_eth.o(.text.ETH_DMAFrameRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_DMAFrameRx
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Request
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReceivedFrame
</UL>

<P><STRONG><a name="[93]"></a>ETH_DMAFrameTx</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mdr32f9qx_eth.o(.text.ETH_DMAFrameTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_DMAFrameTx
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Request
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SendFrame
</UL>

<P><STRONG><a name="[94]"></a>ETH_DMAPrepare</STRONG> (Thumb, 56 bytes, Stack size 72 bytes, mdr32f9qx_eth.o(.text.ETH_DMAPrepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ETH_DMAPrepare &rArr; DMA_Init &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPLowLevelInit()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[97]"></a>ETH_DeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mdr32f9qx_eth.o(.text.ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_DeInit &rArr; ETH_PHY_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[a7]"></a>ETH_GetMACITStatusRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(.text.ETH_GetMACITStatusRegister))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_eval(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[9a]"></a>ETH_GetPHYStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(.text.ETH_GetPHYStatus))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_Reset
</UL>

<P><STRONG><a name="[99]"></a>ETH_Init</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, mdr32f9qx_eth.o(.text.ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ETH_Init &rArr; ETH_DMAPrepare &rArr; DMA_Init &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[9f]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(.text.ETH_MACReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[9e]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(.text.ETH_MACTransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[db]"></a>ETH_PHYCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(.text.ETH_PHYCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[d6]"></a>ETH_PHY_ClockConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(.text.ETH_PHY_ClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[98]"></a>ETH_PHY_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mdr32f9qx_eth.o(.text.ETH_PHY_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_PHY_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetPHYStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[9b]"></a>ETH_ReceivedFrame</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mdr32f9qx_eth.o(.text.ETH_ReceivedFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ETH_ReceivedFrame &rArr; ETH_DMAFrameRx
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameRx
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_eval(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[9c]"></a>ETH_SendFrame</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, mdr32f9qx_eth.o(.text.ETH_SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ETH_SendFrame &rArr; ETH_DMAFrameTx
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameTx
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[9d]"></a>ETH_Start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mdr32f9qx_eth.o(.text.ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[da]"></a>ETH_StructInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mdr32f9qx_eth.o(.text.ETH_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[ad]"></a>PORT_Init</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, mdr32f9qx_port.o(.text.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_init()
</UL>

<P><STRONG><a name="[a5]"></a>RST_CLK_GetClocksFreq</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, mdr32f9qx_rst_clk.o(.text.RST_CLK_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[a1]"></a>RST_CLK_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text.RST_CLK_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSE2status
</UL>

<P><STRONG><a name="[d7]"></a>RST_CLK_HSE2config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text.RST_CLK_HSE2config))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[a0]"></a>RST_CLK_HSE2status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text.RST_CLK_HSE2status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RST_CLK_HSE2status
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[95]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text.RST_CLK_PCLKcmd))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPLowLevelInit()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_init()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[a2]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_mdr1986ve1t.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, system_mdr1986ve1t.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>TIMER_BRGInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mdr32f9qx_timer.o(.text.TIMER_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPLowLevelInit()
</UL>

<P><STRONG><a name="[b2]"></a>TIMER_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text.TIMER_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[c0]"></a>TIMER_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text.TIMER_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPClockHandler()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPLowLevelInit()
</UL>

<P><STRONG><a name="[c8]"></a>TIMER_CntEventSourceConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text.TIMER_CntEventSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPLowLevelInit()
</UL>

<P><STRONG><a name="[c7]"></a>TIMER_CntInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text.TIMER_CntInit))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPLowLevelInit()
</UL>

<P><STRONG><a name="[c6]"></a>TIMER_CntStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text.TIMER_CntStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPLowLevelInit()
</UL>

<P><STRONG><a name="[c5]"></a>TIMER_DeInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text.TIMER_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPLowLevelInit()
</UL>

<P><STRONG><a name="[ba]"></a>TIMER_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text.TIMER_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[b1]"></a>TIMER_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text.TIMER_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[c1]"></a>TIMER_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text.TIMER_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPClockHandler()
</UL>

<P><STRONG><a name="[ae]"></a>UART_BRGInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdr32f9qx_uart.o(.text.UART_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_init()
</UL>

<P><STRONG><a name="[af]"></a>UART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_init()
</UL>

<P><STRONG><a name="[dc]"></a>UART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text.UART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar(int)
</UL>

<P><STRONG><a name="[a4]"></a>UART_Init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, mdr32f9qx_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_init()
</UL>

<P><STRONG><a name="[dd]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar(int)
</UL>

<P><STRONG><a name="[a6]"></a>debug_eval(MDR_ETHERNET_TypeDef*)</STRONG> (Thumb, 64 bytes, Stack size 1528 bytes, ethernet.o(.text._Z10debug_evalP20MDR_ETHERNET_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = debug_eval(MDR_ETHERNET_TypeDef*) &rArr; ProcessEthIAFrame(unsigned int*, unsigned int) &rArr; ProcessTCPFrame() &rArr; PrepareTCP_FRAME(unsigned short) &rArr; standard_chksum_opt(void*, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEthBroadcastFrame(unsigned int*, unsigned int)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEthIAFrame(unsigned int*, unsigned int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReceivedFrame
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetMACITStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>CalcChecksum(void*, unsigned short, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcpip.o(.text._Z12CalcChecksumPvtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcChecksum(void*, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapBytes(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareICMP_ECHO_REPLY()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_DATA_FRAME()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_FRAME(unsigned short)
</UL>

<P><STRONG><a name="[b6]"></a>TCPStopTimer()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcpip.o(.text._Z12TCPStopTimerv))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPFrame()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEthIAFrame(unsigned int*, unsigned int)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[ac]"></a>uart_tx_init()</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, uart.o(.text._Z12uart_tx_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uart_tx_init() &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BRGInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendstr(char*, ...)
</UL>

<P><STRONG><a name="[cf]"></a>CopyFromFrame(void*, unsigned short*, unsigned int)</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, tcpip.o(.text._Z13CopyFromFramePvPtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CopyFromFrame(void*, unsigned short*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareICMP_ECHO_REPLY()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEthBroadcastFrame(unsigned int*, unsigned int)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEthIAFrame(unsigned int*, unsigned int)
</UL>

<P><STRONG><a name="[b0]"></a>DoNetworkStuff(MDR_ETHERNET_TypeDef*)</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, tcpip.o(.text._Z14DoNetworkStuffP20MDR_ETHERNET_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DoNetworkStuff(MDR_ETHERNET_TypeDef*) &rArr; TCPHandleRetransmission() &rArr; PrepareTCP_FRAME(unsigned short) &rArr; standard_chksum_opt(void*, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPHandleRetransmission()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_DATA_FRAME()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPTransmitTxBuffer(unsigned int, unsigned char*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPStartRetryTimer()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPReleaseRxBuffer()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPHandleTimeout()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_FRAME(unsigned short)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPRestartTimer()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPClockHandler()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPStopTimer()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetFlagStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCounter
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>TCPPassiveOpen()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tcpip.o(.text._Z14TCPPassiveOpenv))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPClockHandler()
</UL>

<P><STRONG><a name="[be]"></a>ProcessTCPFrame()</STRONG> (Thumb, 692 bytes, Stack size 24 bytes, tcpip.o(.text._Z15ProcessTCPFramev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ProcessTCPFrame() &rArr; PrepareTCP_FRAME(unsigned short) &rArr; standard_chksum_opt(void*, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPStartTimeWaitTimer()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPStartRetryTimer()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_FRAME(unsigned short)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPRestartTimer()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPStopTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEthIAFrame(unsigned int*, unsigned int)
</UL>

<P><STRONG><a name="[b3]"></a>TCPClockHandler()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcpip.o(.text._Z15TCPClockHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TCPClockHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPPassiveOpen()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetCounter
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[c3]"></a>TCPLowLevelInit()</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, tcpip.o(.text._Z15TCPLowLevelInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TCPLowLevelInit() &rArr; ETH_DMAPrepare &rArr; DMA_Init &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DeInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntEventSourceConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
</UL>

<P><STRONG><a name="[b4]"></a>TCPRestartTimer()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpip.o(.text._Z15TCPRestartTimerv))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPFrame()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[c9]"></a>CalcChecksum_TCP(void*, void*, unsigned short, unsigned int, unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tcpip.o(.text._Z16CalcChecksum_TCPPvS_tjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CalcChecksum_TCP(void*, void*, unsigned short, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapBytes(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_DATA_FRAME()
</UL>

<P><STRONG><a name="[b8]"></a>PrepareTCP_FRAME(unsigned short)</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, tcpip.o(.text._Z16PrepareTCP_FRAMEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PrepareTCP_FRAME(unsigned short) &rArr; standard_chksum_opt(void*, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDWBE(unsigned char*, unsigned int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWBE(unsigned char*, unsigned short)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_chksum_opt(void*, unsigned int, unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChecksum(void*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPHandleRetransmission()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPFrame()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[cd]"></a>ProcessICMPFrame()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcpip.o(.text._Z16ProcessICMPFramev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProcessICMPFrame() &rArr; PrepareICMP_ECHO_REPLY() &rArr; standard_chksum_opt(void*, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareICMP_ECHO_REPLY()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEthIAFrame(unsigned int*, unsigned int)
</UL>

<P><STRONG><a name="[b7]"></a>TCPHandleTimeout()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tcpip.o(.text._Z16TCPHandleTimeoutv))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[d0]"></a>PrepareARP_ANSWER()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcpip.o(.text._Z17PrepareARP_ANSWERv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrepareARP_ANSWER()
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEthBroadcastFrame(unsigned int*, unsigned int)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEthIAFrame(unsigned int*, unsigned int)
</UL>

<P><STRONG><a name="[a8]"></a>ProcessEthIAFrame(unsigned int*, unsigned int)</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, tcpip.o(.text._Z17ProcessEthIAFramePjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ProcessEthIAFrame(unsigned int*, unsigned int) &rArr; ProcessTCPFrame() &rArr; PrepareTCP_FRAME(unsigned short) &rArr; standard_chksum_opt(void*, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareARP_ANSWER()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessICMPFrame()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPFrame()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFromFrame(void*, unsigned short*, unsigned int)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPStopTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_eval(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[d1]"></a>PrepareARP_REQUEST()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tcpip.o(.text._Z18PrepareARP_REQUESTv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrepareARP_REQUEST()
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPHandleRetransmission()
</UL>

<P><STRONG><a name="[bc]"></a>TCPReleaseRxBuffer()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcpip.o(.text._Z18TCPReleaseRxBufferv))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[b9]"></a>TCPStartRetryTimer()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcpip.o(.text._Z18TCPStartRetryTimerv))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPTransmitTxBuffer(unsigned int, unsigned char*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPFrame()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[bb]"></a>TCPTransmitTxBuffer(unsigned int, unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tcpip.o(.text._Z19TCPTransmitTxBufferjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TCPTransmitTxBuffer(unsigned int, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPStartRetryTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[cc]"></a>standard_chksum_opt(void*, unsigned int, unsigned char)</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, tcpip.o(.text._Z19standard_chksum_optPvjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = standard_chksum_opt(void*, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapBytes(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareICMP_ECHO_REPLY()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_FRAME(unsigned short)
</UL>

<P><STRONG><a name="[bd]"></a>PrepareTCP_DATA_FRAME()</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, tcpip.o(.text._Z21PrepareTCP_DATA_FRAMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PrepareTCP_DATA_FRAME() &rArr; CalcChecksum_TCP(void*, void*, unsigned short, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDWBE(unsigned char*, unsigned int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWBE(unsigned char*, unsigned short)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChecksum_TCP(void*, void*, unsigned short, unsigned int, unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChecksum(void*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[bf]"></a>TCPStartTimeWaitTimer()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcpip.o(.text._Z21TCPStartTimeWaitTimerv))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTCPFrame()
</UL>

<P><STRONG><a name="[ce]"></a>PrepareICMP_ECHO_REPLY()</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tcpip.o(.text._Z22PrepareICMP_ECHO_REPLYv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PrepareICMP_ECHO_REPLY() &rArr; standard_chksum_opt(void*, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWBE(unsigned char*, unsigned short)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_chksum_opt(void*, unsigned int, unsigned char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFromFrame(void*, unsigned short*, unsigned int)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChecksum(void*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessICMPFrame()
</UL>

<P><STRONG><a name="[b5]"></a>TCPHandleRetransmission()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tcpip.o(.text._Z23TCPHandleRetransmissionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TCPHandleRetransmission() &rArr; PrepareTCP_FRAME(unsigned short) &rArr; standard_chksum_opt(void*, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareARP_REQUEST()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_FRAME(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[a9]"></a>ProcessEthBroadcastFrame(unsigned int*, unsigned int)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tcpip.o(.text._Z24ProcessEthBroadcastFramePjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ProcessEthBroadcastFrame(unsigned int*, unsigned int) &rArr; CopyFromFrame(void*, unsigned short*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareARP_ANSWER()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFromFrame(void*, unsigned short*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_eval(MDR_ETHERNET_TypeDef*)
</UL>

<P><STRONG><a name="[d2]"></a>sendstr(char*, ...)</STRONG> (Thumb, 116 bytes, Stack size 2088 bytes, uart.o(.text._Z7sendstrPcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216 + Unknown Stack Size
<LI>Call Chain = sendstr(char*, ...) &rArr; uart_tx_init() &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar(int)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>WriteWBE(unsigned char*, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpip.o(.text._Z8WriteWBEPht))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareICMP_ECHO_REPLY()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_DATA_FRAME()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_FRAME(unsigned short)
</UL>

<P><STRONG><a name="[d4]"></a>eth_init(unsigned char (&) [6])</STRONG> (Thumb, 172 bytes, Stack size 120 bytes, ethernet.o(.text._Z8eth_initRA6_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = eth_init(unsigned char (&) [6]) &rArr; TCPLowLevelInit() &rArr; ETH_DMAPrepare &rArr; DMA_Init &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPLowLevelInit()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSE2status
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSE2config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_ClockConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ClockDeInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ClockCMD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BRGInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>sendchar(int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(.text._Z8sendchari))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendchar(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendstr(char*, ...)
</UL>

<P><STRONG><a name="[ab]"></a>SwapBytes(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip.o(.text._Z9SwapBytest))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard_chksum_opt(void*, unsigned int, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChecksum_TCP(void*, void*, unsigned short, unsigned int, unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChecksum(void*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[cb]"></a>WriteDWBE(unsigned char*, unsigned int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcpip.o(.text._Z9WriteDWBEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_DATA_FRAME()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTCP_FRAME(unsigned short)
</UL>

<P><STRONG><a name="[5e]"></a>main</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = main &rArr; sendstr(char*, ...) &rArr; uart_tx_init() &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init(unsigned char (&) [6])
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendstr(char*, ...)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoNetworkStuff(MDR_ETHERNET_TypeDef*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_eval(MDR_ETHERNET_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast), UNUSED)

<P><STRONG><a name="[86]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[7b]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[74]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[58]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[28]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[39]"></a>_printf_fp_hex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8d]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>

<P><STRONG><a name="[27]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[85]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[88]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[8a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7f]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[81]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
